/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by informer-gen. DO NOT EDIT.

package v1alpha1

import (
	"context"
	time "time"

	configmappodrefresherv1alpha1 "github.com/marcosQuesada/k8s-lab/services/config-reloader-controller/internal/infra/k8s/crd/apis/configmappodrefresher/v1alpha1"
	versioned "github.com/marcosQuesada/k8s-lab/services/config-reloader-controller/internal/infra/k8s/crd/generated/clientset/versioned"
	internalinterfaces "github.com/marcosQuesada/k8s-lab/services/config-reloader-controller/internal/infra/k8s/crd/generated/informers/externalversions/internalinterfaces"
	v1alpha1 "github.com/marcosQuesada/k8s-lab/services/config-reloader-controller/internal/infra/k8s/crd/generated/listers/configmappodrefresher/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

// ConfigMapPodRefresherInformer provides access to a shared informer and lister for
// ConfigMapPodRefreshers.
type ConfigMapPodRefresherInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() v1alpha1.ConfigMapPodRefresherLister
}

type configMapPodRefresherInformer struct {
	factory          internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
	namespace        string
}

// NewConfigMapPodRefresherInformer constructs a new informer for ConfigMapPodRefresher type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewConfigMapPodRefresherInformer(client versioned.Interface, namespace string, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredConfigMapPodRefresherInformer(client, namespace, resyncPeriod, indexers, nil)
}

// NewFilteredConfigMapPodRefresherInformer constructs a new informer for ConfigMapPodRefresher type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredConfigMapPodRefresherInformer(client versioned.Interface, namespace string, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options v1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.K8slabV1alpha1().ConfigMapPodRefreshers(namespace).List(context.TODO(), options)
			},
			WatchFunc: func(options v1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.K8slabV1alpha1().ConfigMapPodRefreshers(namespace).Watch(context.TODO(), options)
			},
		},
		&configmappodrefresherv1alpha1.ConfigMapPodRefresher{},
		resyncPeriod,
		indexers,
	)
}

func (f *configMapPodRefresherInformer) defaultInformer(client versioned.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredConfigMapPodRefresherInformer(client, f.namespace, resyncPeriod, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc}, f.tweakListOptions)
}

func (f *configMapPodRefresherInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&configmappodrefresherv1alpha1.ConfigMapPodRefresher{}, f.defaultInformer)
}

func (f *configMapPodRefresherInformer) Lister() v1alpha1.ConfigMapPodRefresherLister {
	return v1alpha1.NewConfigMapPodRefresherLister(f.Informer().GetIndexer())
}
