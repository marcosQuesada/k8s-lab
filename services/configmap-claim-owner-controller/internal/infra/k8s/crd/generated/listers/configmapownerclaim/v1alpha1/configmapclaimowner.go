/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/marcosQuesada/k8s-lab/services/configmap-claim-owner-controller/internal/infra/k8s/crd/apis/configmapownerclaim/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ConfigMapClaimOwnerLister helps list ConfigMapClaimOwners.
// All objects returned here must be treated as read-only.
type ConfigMapClaimOwnerLister interface {
	// List lists all ConfigMapClaimOwners in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ConfigMapClaimOwner, err error)
	// ConfigMapClaimOwners returns an object that can list and get ConfigMapClaimOwners.
	ConfigMapClaimOwners(namespace string) ConfigMapClaimOwnerNamespaceLister
	ConfigMapClaimOwnerListerExpansion
}

// configMapClaimOwnerLister implements the ConfigMapClaimOwnerLister interface.
type configMapClaimOwnerLister struct {
	indexer cache.Indexer
}

// NewConfigMapClaimOwnerLister returns a new ConfigMapClaimOwnerLister.
func NewConfigMapClaimOwnerLister(indexer cache.Indexer) ConfigMapClaimOwnerLister {
	return &configMapClaimOwnerLister{indexer: indexer}
}

// List lists all ConfigMapClaimOwners in the indexer.
func (s *configMapClaimOwnerLister) List(selector labels.Selector) (ret []*v1alpha1.ConfigMapClaimOwner, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ConfigMapClaimOwner))
	})
	return ret, err
}

// ConfigMapClaimOwners returns an object that can list and get ConfigMapClaimOwners.
func (s *configMapClaimOwnerLister) ConfigMapClaimOwners(namespace string) ConfigMapClaimOwnerNamespaceLister {
	return configMapClaimOwnerNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ConfigMapClaimOwnerNamespaceLister helps list and get ConfigMapClaimOwners.
// All objects returned here must be treated as read-only.
type ConfigMapClaimOwnerNamespaceLister interface {
	// List lists all ConfigMapClaimOwners in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ConfigMapClaimOwner, err error)
	// Get retrieves the ConfigMapClaimOwner from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ConfigMapClaimOwner, error)
	ConfigMapClaimOwnerNamespaceListerExpansion
}

// configMapClaimOwnerNamespaceLister implements the ConfigMapClaimOwnerNamespaceLister
// interface.
type configMapClaimOwnerNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ConfigMapClaimOwners in the indexer for a given namespace.
func (s configMapClaimOwnerNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ConfigMapClaimOwner, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ConfigMapClaimOwner))
	})
	return ret, err
}

// Get retrieves the ConfigMapClaimOwner from the indexer for a given namespace and name.
func (s configMapClaimOwnerNamespaceLister) Get(name string) (*v1alpha1.ConfigMapClaimOwner, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("configmapclaimowner"), name)
	}
	return obj.(*v1alpha1.ConfigMapClaimOwner), nil
}
